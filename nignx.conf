# nginx.conf

# HTTP 요청을 처리하는 기본 서버 블록을 정의합니다.
# 이 user와 worker_processes는 Docker 이미지에 이미 설정되어 있을 수 있으므로,
# Dockerfile에서 nginx:alpine 같은 이미지를 사용한다면 최상단에 명시하지 않아도 됩니다.
# user nginx;
# worker_processes auto;
# error_log /var/log/nginx/error.log warn;
# pid /var/run/nginx.pid;

events {
    worker_connections 1024; # 동시 접속자 수 (필요에 따라 조절)
}

http {
    include /etc/nginx/mime.types; # 다양한 파일 타입을 Nginx가 인식하도록 함
    default_type application/octet-stream; # 기본 MIME 타입 설정

    # 로깅 형식 설정
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log /var/log/nginx/access.log main; # 접근 로그 파일 경로

    sendfile on; # sendfile() 시스템 콜 사용 여부 (성능 향상)
    #tcp_nopush on;
    keepalive_timeout 65; # 클라이언트와의 keep-alive 연결 유지 시간
    #gzip on; # 응답 압축 사용 여부 (선택 사항)

    server {
        listen 80; # Nginx가 수신할 포트 (Docker 컨테이너 내부 포트)
        server_name localhost; # 또는 실제 사용할 도메인명

        # 모든 요청(/)을 Vercel 배포 주소로 프록시합니다.
        location / {
            proxy_pass https://tmdb-movie-app-omega.vercel.app;

            # 프록시 시 필요한 헤더 설정
            proxy_set_header Host $host; # Vercel이 올바른 호스트명을 인식하도록 함 (중요!)
                                          # 만약 Vercel의 기본 도메인으로 프록시한다면,
                                          # proxy_set_header Host your-tmdb-app.vercel.app; 로 직접 지정할 수도 있습니다.
                                          # $host를 사용하면 Nginx가 받은 Host 헤더를 그대로 전달합니다.
                                          # custom domain을 Vercel에 연결하고 Nginx를 통해 접속한다면 $host가 적절합니다.
                                          # 여기서는 Vercel의 기본 URL을 사용하므로 실제 Vercel 호스트명을 명시하는 것이 더 안전할 수 있습니다.
                                          # 예: proxy_set_header Host your-tmdb-app.vercel.app;

            proxy_set_header X-Real-IP $remote_addr; # 실제 클라이언트 IP 주소 전달
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; # 프록시 서버 목록 전달
            proxy_set_header X-Forwarded-Proto $scheme; # 원래 요청 프로토콜(http/https) 전달

            # WebSocket 지원 (필요한 경우)
            # proxy_http_version 1.1;
            # proxy_set_header Upgrade $http_upgrade;
            # proxy_set_header Connection "upgrade";

            # 버퍼링 관련 설정 (필요에 따라 조절)
            proxy_buffering on;
            proxy_buffers 8 16k;
            proxy_buffer_size 32k;
            proxy_busy_buffers_size 64k;
            proxy_max_temp_file_size 0; # 임시 파일 사용 안함 (메모리에서 처리)
        }

        # 에러 페이지 설정 (선택 사항)
        # error_page 500 502 503 504 /50x.html;
        # location = /50x.html {
        #     root /usr/share/nginx/html;
        # }
    }
}